//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export interface IDownloadClient {
    /**
     * @return OK
     */
    download(body: DownloadVideoRequest): Promise<void>;
}

export class DownloadClient implements IDownloadClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * @return OK
     */
    download(body: DownloadVideoRequest, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/download/download";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDownload(_response);
        });
    }

    protected processDownload(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export interface IPagesClient {
    /**
     * @return OK
     */
    pages(): Promise<ScrapePageState>;
    /**
     * @return OK
     */
    retry(): Promise<void>;
}

export class PagesClient implements IPagesClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * @return OK
     */
    pages( cancelToken?: CancelToken): Promise<ScrapePageState> {
        let url_ = this.baseUrl + "/pages";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPages(_response);
        });
    }

    protected processPages(response: AxiosResponse): Promise<ScrapePageState> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ScrapePageState.fromJS(resultData200);
            return Promise.resolve<ScrapePageState>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ScrapePageState>(null as any);
    }

    /**
     * @return OK
     */
    retry( cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/pages/failed/retry";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetry(_response);
        });
    }

    protected processRetry(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export interface IVideosClient {
    /**
     * @return OK
     */
    videos(): Promise<DownloadVideoState[]>;
    /**
     * @return OK
     */
    retry2(): Promise<void>;
    /**
     * @return OK
     */
    retry3(id: string): Promise<void>;
}

export class VideosClient implements IVideosClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * @return OK
     */
    videos( cancelToken?: CancelToken): Promise<DownloadVideoState[]> {
        let url_ = this.baseUrl + "/videos";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processVideos(_response);
        });
    }

    protected processVideos(response: AxiosResponse): Promise<DownloadVideoState[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DownloadVideoState.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<DownloadVideoState[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DownloadVideoState[]>(null as any);
    }

    /**
     * @return OK
     */
    retry2( cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/videos/failed/retry";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetry2(_response);
        });
    }

    protected processRetry2(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    retry3(id: string, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/videos/failed/{id}/retry";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetry3(_response);
        });
    }

    protected processRetry3(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export class DownloadVideoRequest implements IDownloadVideoRequest {
    url?: string | undefined;

    constructor(data?: IDownloadVideoRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): DownloadVideoRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DownloadVideoRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["url"] = this.url;
        return data;
    }
}

export interface IDownloadVideoRequest {
    url?: string | undefined;
}

export class DownloadVideoState implements IDownloadVideoState {
    correlationId?: string;
    rowVersion?: number;
    currentState?: string | undefined;
    url?: string | undefined;
    requestedTimestamp?: Date;
    downloadedTimestamp?: Date | undefined;
    videoMetaData?: VideoMetaData;
    errorMessage?: string | undefined;
    errorTimestamp?: Date | undefined;

    constructor(data?: IDownloadVideoState) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.correlationId = _data["correlationId"];
            this.rowVersion = _data["rowVersion"];
            this.currentState = _data["currentState"];
            this.url = _data["url"];
            this.requestedTimestamp = _data["requestedTimestamp"] ? new Date(_data["requestedTimestamp"].toString()) : <any>undefined;
            this.downloadedTimestamp = _data["downloadedTimestamp"] ? new Date(_data["downloadedTimestamp"].toString()) : <any>undefined;
            this.videoMetaData = _data["videoMetaData"] ? VideoMetaData.fromJS(_data["videoMetaData"]) : <any>undefined;
            this.errorMessage = _data["errorMessage"];
            this.errorTimestamp = _data["errorTimestamp"] ? new Date(_data["errorTimestamp"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DownloadVideoState {
        data = typeof data === 'object' ? data : {};
        let result = new DownloadVideoState();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["correlationId"] = this.correlationId;
        data["rowVersion"] = this.rowVersion;
        data["currentState"] = this.currentState;
        data["url"] = this.url;
        data["requestedTimestamp"] = this.requestedTimestamp ? this.requestedTimestamp.toISOString() : <any>undefined;
        data["downloadedTimestamp"] = this.downloadedTimestamp ? this.downloadedTimestamp.toISOString() : <any>undefined;
        data["videoMetaData"] = this.videoMetaData ? this.videoMetaData.toJSON() : <any>undefined;
        data["errorMessage"] = this.errorMessage;
        data["errorTimestamp"] = this.errorTimestamp ? this.errorTimestamp.toISOString() : <any>undefined;
        return data;
    }
}

export interface IDownloadVideoState {
    correlationId?: string;
    rowVersion?: number;
    currentState?: string | undefined;
    url?: string | undefined;
    requestedTimestamp?: Date;
    downloadedTimestamp?: Date | undefined;
    videoMetaData?: VideoMetaData;
    errorMessage?: string | undefined;
    errorTimestamp?: Date | undefined;
}

export class ScrapePageState implements IScrapePageState {
    correlationId?: string;
    rowVersion?: number;
    currentState?: string | undefined;
    url?: string | undefined;
    requestedTimestamp?: Date;
    scrapedTimestamp?: Date | undefined;
    domain?: string | undefined;
    title?: string | undefined;
    storageLocation?: string | undefined;
    errorMessage?: string | undefined;
    errorTimestamp?: Date | undefined;

    constructor(data?: IScrapePageState) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.correlationId = _data["correlationId"];
            this.rowVersion = _data["rowVersion"];
            this.currentState = _data["currentState"];
            this.url = _data["url"];
            this.requestedTimestamp = _data["requestedTimestamp"] ? new Date(_data["requestedTimestamp"].toString()) : <any>undefined;
            this.scrapedTimestamp = _data["scrapedTimestamp"] ? new Date(_data["scrapedTimestamp"].toString()) : <any>undefined;
            this.domain = _data["domain"];
            this.title = _data["title"];
            this.storageLocation = _data["storageLocation"];
            this.errorMessage = _data["errorMessage"];
            this.errorTimestamp = _data["errorTimestamp"] ? new Date(_data["errorTimestamp"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ScrapePageState {
        data = typeof data === 'object' ? data : {};
        let result = new ScrapePageState();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["correlationId"] = this.correlationId;
        data["rowVersion"] = this.rowVersion;
        data["currentState"] = this.currentState;
        data["url"] = this.url;
        data["requestedTimestamp"] = this.requestedTimestamp ? this.requestedTimestamp.toISOString() : <any>undefined;
        data["scrapedTimestamp"] = this.scrapedTimestamp ? this.scrapedTimestamp.toISOString() : <any>undefined;
        data["domain"] = this.domain;
        data["title"] = this.title;
        data["storageLocation"] = this.storageLocation;
        data["errorMessage"] = this.errorMessage;
        data["errorTimestamp"] = this.errorTimestamp ? this.errorTimestamp.toISOString() : <any>undefined;
        return data;
    }
}

export interface IScrapePageState {
    correlationId?: string;
    rowVersion?: number;
    currentState?: string | undefined;
    url?: string | undefined;
    requestedTimestamp?: Date;
    scrapedTimestamp?: Date | undefined;
    domain?: string | undefined;
    title?: string | undefined;
    storageLocation?: string | undefined;
    errorMessage?: string | undefined;
    errorTimestamp?: Date | undefined;
}

export class VideoMetaData implements IVideoMetaData {
    videoId?: string | undefined;
    videoTitle?: string | undefined;
    author?: string | undefined;
    videoUploadTimestamp?: Date;
    storageLocation?: string | undefined;

    constructor(data?: IVideoMetaData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.videoId = _data["videoId"];
            this.videoTitle = _data["videoTitle"];
            this.author = _data["author"];
            this.videoUploadTimestamp = _data["videoUploadTimestamp"] ? new Date(_data["videoUploadTimestamp"].toString()) : <any>undefined;
            this.storageLocation = _data["storageLocation"];
        }
    }

    static fromJS(data: any): VideoMetaData {
        data = typeof data === 'object' ? data : {};
        let result = new VideoMetaData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["videoId"] = this.videoId;
        data["videoTitle"] = this.videoTitle;
        data["author"] = this.author;
        data["videoUploadTimestamp"] = this.videoUploadTimestamp ? this.videoUploadTimestamp.toISOString() : <any>undefined;
        data["storageLocation"] = this.storageLocation;
        return data;
    }
}

export interface IVideoMetaData {
    videoId?: string | undefined;
    videoTitle?: string | undefined;
    author?: string | undefined;
    videoUploadTimestamp?: Date;
    storageLocation?: string | undefined;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}